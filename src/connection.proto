syntax = "proto3";

// we don't need reflection for our use cases
option optimize_for = LITE_RUNTIME;

// protobuf lite doesn't currently contain well known proto definitions (like
// empty)
// don't include for now
// import "google/protobuf/empty.proto";

package azure.proto;

/**
 * Contains information about a device, including it's operating system, device
 * name etc.
 */
message DeviceInfo {
  enum OperatingSystem {
    OS_WINDOWS = 0;
    OS_LINUX = 1;
    OS_MACOS = 2;
    OS_IOS = 3;
    OS_ANDROID = 4;
  }

  OperatingSystem operating_system = 1;
  string os_version = 2;
  string device_name = 3;
  string udid = 4;
}

/**
 * Message sent and received on a new connection.
 * Contains information about the sender such as device onfo and azure version.
 */
message Handshake {
  string azure_version = 1;
  DeviceInfo device_info = 2;
}

/**
 * Message sent to poll latency between clients for testing quality of
 * connection
 */
message Keepalive {
  int64 timestap = 1;
}

enum DisconnectOperation {
  OP_NONE = 0;
  OP_RESTART = 1;  // restart server
  OP_KILL = 2;     // kill server
}

message DisconnectRequest {
  string reason = 1;
  DisconnectOperation operation = 2;
}

message DisconnectResponse {}

service ConnectionService {
  /**
   * Sends a handshake message on new connection to client, who sends one back
   * if client is on an incompatible version of azure, this rpc will return an
   * error instead
   */
  rpc Connect(Handshake) returns (Handshake);
  /**
   * Disconnect from connected server.
   * This rpc should not return if a kill/restart operation is also provided
   */
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);
}