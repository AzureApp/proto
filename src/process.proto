syntax = "proto3";

// we don't need reflection for our use cases
option optimize_for = LITE_RUNTIME;

import "google/protobuf/empty.proto";

package azure.proto;

/**
 * flag indicating the type of a process, can have more than one.
 */
enum ProcessType {
  PROC_ALL = 0;
  PROC_SYSTEM = 1;      // system processes like daemons
  PROC_BACKGROUND = 2;  // background user processes
  PROC_APP = 4;         // what an average user would call an "app"
}

// TODO: maybe use a oneof for Process or AppProcess which contains more info
// exclusive to apps
message Process {
  int32 pid = 1;
  string name = 2;
  string path = 3;
  int32 process_flags = 4;  // use the ProcessType enum with this flag

  // TODO: change this to a oneof? (or just define every possible additional data)
  bytes additional_info = 10;  // this info can be used to encode data such as
                               // app icons if supported by the server
}

message ProcessRequest {
  oneof parameters {
    int32 process_flags = 1;
    int32 pid = 2;
    string name = 3;
  }
}

message KillRequest {
  int32 pid = 1;
  int32 signal = 2;  // defaults to SIGTERM (or equivalent for other platforms)
}

service ProcessService {
  /**
   * Finds the first available process that matches the request parameters.
   */
  rpc GetProcess(ProcessRequest) returns (Process);
  /**
   * Returns a stream of all processes that match the request parameters.
   */
  rpc FindProcesses(ProcessRequest) returns (stream Process);
  /**
   * Sends kill signal to process.
   * This rpc fails if the process provided does not exist
   * or there is insufficient privileges to kill the process
   */
  rpc KillProcess(KillRequest) returns (google.protobuf.Empty);
}